import React,{useState,useRef,useEffect,useMemo,useCallback,createContext,useContext} from 'react'
import * as THREE from 'three'
import {Canvas,useFrame,useThree,extend} from '@react-three/fiber'
import {OrbitControls} from '@react-three/drei'
import {three3DHelpersUtil} from 'src/utils/three-helpers'
import {use3DAnimation} from 'src/hooks/use3DAnimation'
import 'src/styles/components/three-scene.css'
import {ComponentBaseProps} from 'src/types'
extend({OrbitControls})
interface ThreeSceneProps extends ComponentBaseProps{modelPath?:string;intensity?:number;fogColor?:string;fogNear?:number;fogFar?:number;environmentMap?:string
}type ThreeSceneContextType={scene:THREE.Scene;camera:THREE.Camera;renderer:THREE.WebGLRenderer;setQuality:(quality:'low'|'medium'|'high')=>void
}const ThreeSceneContext=createContext<ThreeSceneContextType|undefined>(undefined)const useThreeScene=():ThreeSceneContextType=>{const context=useContext(ThreeSceneContext)if(!context){throw new Error('useThreeScene must be used within a ThreeScene component')}return context}const setOrbitControls=(controls:THREE.OrbitControls)=>{controls.enableDamping=true;controls.dampingFactor=0.1;controls.rotateSpeed=0.5;controls.zoomSpeed=0.5;controls.panSpeed=0.5;controls.enableZoom=true;controls.enablePan=true;controls.enableRotate=true}const getCamera=({fov,aspect,near,far}:{fov:number;aspect:number;near:number;far:number})=>{const camera=new THREE.PerspectiveCamera(fov,aspect,near,far)camera.position.set(0,5,15)return camera}const setLights=(scene:THREE.Scene,intensity:number)=>{const ambientLight=new THREE.AmbientLight('#ffffff',intensity/2)scene.add(ambientLight)const directionalLight=new THREE.DirectionalLight('#ffffff',intensity)directionalLight.position.set(10,10,10)directionalLight.castShadow=true;directionalLight.shadow.mapSize.width=1024;directionalLight.shadow.mapSize.height=1024;directionalLight.shadow.camera.near=0.1;directionalLight.shadow.camera.far=50;scene.add(directionalLight)}export const ThreeScene:React.FC<ThreeSceneProps>=({modelPath,intensity=1,fogColor,fogNear,fogFar,children,className='',style,...restProps})=>{const[quality,setQuality]=useState<'low'|'medium'|'high'>('medium')const canvasRef=useRef<any>()const cameraRef=useRef<THREE.PerspectiveCamera>(getCamera({fov:75,aspect:window.innerWidth/window.innerHeight,near:0.1,far:100}))const sceneRef=useRef<THREE.Scene>(new THREE.Scene())const orbitControlsRef=useRef<THREE.OrbitControls>()const{gl,size,camera}=useThree()const threeScene=useMemo(()=>{const newScene=new THREE.Scene()newScene.background=new THREE.Color('#ffffff')return newScene},[])useEffect(()=>{const camera=getCamera({fov:75,aspect:size.width/size.height,near:0.1,far:100})cameraRef.current=camera;return()=>{cameraRef.current=getCamera({fov:75,aspect:size.width/size.height,near:0.1,far:100})}},[size])useEffect(()=>{const camera=cameraRef.currentcamera.aspect=size.width/size.height;camera.updateProjectionMatrix()},[size])useEffect(()=>{const scene=sceneRef.currentconst fog=new THREE.Fog(fogColor||'#ffffff',fogNear||1,fogFar||100)scene.fog=fog;return()=>{scene.fog=new THREE.Fog(fogColor||'#ffffff',fogNear||1,fogFar||100)}},[fogColor,fogNear,fogFar])useEffect(()=>{const camera=cameraRef.currentconst controls=new OrbitControls(camera,canvasRef.current)setOrbitControls(controls)orbitControlsRef.current=controlsreturn()=>{orbitControlsRef.current=new OrbitControls(camera,canvasRef.current)}},[])useFrame(({camera})=>{orbitControlsRef.current?.update()})useEffect(()=>{const camera=cameraRef.currentreturn()=>{cameraRef.current=getCamera({fov:75,aspect:size.width/size.height,near:0.1,far:100})}},[size])useEffect(()=>{setLights(sceneRef.current,intensity)},[intensity])const contextValue=useMemo(()=>({scene:sceneRef.current,camera:cameraRef.current,renderer:gl,setQuality}),[gl])return(<divclassName={`relative w-full h-screen flex items-center justify-center overflow-hidden ${className}`}style={style}{...restProps}><Canvasref={canvasRef}shadowsdpr={[1,1]}gl={{alpha:false,stencil:false,depth:true,antialias:true}}camera={cameraRef.current}style={{width:'100%',height:'100%'}}><ThreeSceneContext.Providervalue={contextValue}><ambientLightintensity={0.5}/><directionalLightposition={[10,10,10]}intensity={0.8}castShadowshadow-mapSize-width={1024}shadow-mapSize-height={1024}shadow-camera-near={0.1}shadow-camera-far={50}/><OrbitControlsmakeDefaultref={orbitControlsRef}/><axesHelperscale={5}/><meshscale={3}position={[0,0,0]}castShadowreceiveShadow><sphereGeometryargs={[1,32,32]}/><meshStandardMaterialcolor={'white'}/></mesh>{children}</ThreeSceneContext.Provider></Canvas></div>)}