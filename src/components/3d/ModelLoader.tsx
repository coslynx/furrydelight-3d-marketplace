import React,{Suspense,useRef,useEffect,useMemo} from 'react'
import {useLoader,useThree} from '@react-three/fiber'
import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader'
import {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader'
import * as THREE from 'three'
import {ComponentBaseProps} from 'src/types'
interface ModelLoaderProps extends ComponentBaseProps{modelPath:string;lodDistances?:number[]}const ModelLoader:React.FC<ModelLoaderProps>=({modelPath,lodDistances})=>{const scene=useThree()const dracoLoader=new DRACOLoader()dracoLoader.setDecoderPath('/draco/')const gltfLoader=new GLTFLoader().setDRACOLoader(dracoLoader)const model=useLoader(GLTFLoader,modelPath,(loader)=>{loader.setDRACOLoader(dracoLoader)})const lod=useMemo(()=>{const newLod=new THREE.LOD()if(model){const low=model.scene;newLod.addLevel(low,lodDistances?.[0]||5);const medium=model.scene.clone();medium.scale.set(0.5,0.5,0.5);newLod.addLevel(medium,lodDistances?.[1]||25);const high=model.scene.clone();high.scale.set(0.8,0.8,0.8);newLod.addLevel(high,0);newLod.update()}return newLod},[model,lodDistances])useEffect(()=>{return()=>{if(lod){lod.traverse((object)=>{if(object instanceof THREE.Mesh){object.geometry.dispose();if(object.material){if(Array.isArray(object.material)){object.material.forEach((material)=>{material.dispose()})}else{object.material.dispose()}}}})}}},[lod])return(<Suspensefallback={<LoadingSpinner/>}>{model&&<primitiveobject={lod}/>}</Suspense>)}const LoadingSpinner=()=>{const meshRef=useRef<THREE.Mesh>(null)useFrame(()=>{if(meshRef.current){meshRef.current.rotation.x+=0.01;meshRef.current.rotation.y+=0.01}})return(<meshref={meshRef}position={[0,0,0]}><sphereGeometryargs={[1,32,32]}/>\<meshBasicMaterialcolor={'#fff'}/></mesh>)}export default ModelLoader